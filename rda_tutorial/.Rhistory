for (i in 1:6){ # hard coding here!!
rdaout_geo_pred[,i] <- unlist(rda_trait_pred(rdaout_geo, i, 3))
}
head(rdaout_geo_pred)
subset_indPhen_df <- cbind(subset_indPhen_df, rdaout_geo_pred)
RDAbarplot[,3] <- c(
cor(subset_indPhen_df$phenotype1_mat, subset_indPhen_df$rdageo_trait_pred_1_mat)  ,
cor(subset_indPhen_df$phenotype2_MTWetQ, subset_indPhen_df$rdageo_trait_pred_2_MTWetQ)  ,
cor(subset_indPhen_df$phenotype3_MTDQ, subset_indPhen_df$rdageo_trait_pred_3_MTDQ)  ,
cor(subset_indPhen_df$phenotype4_PDM, subset_indPhen_df$rdageo_trait_pred_4_PDM)  ,
cor(subset_indPhen_df$phenotype5_PwarmQ, subset_indPhen_df$rdageo_trait_pred_5_PwarmQ)  ,
cor(subset_indPhen_df$phenotype6_PWM, subset_indPhen_df$rdageo_trait_pred_6_PWM)
)
head(ext_env)
nearest <- nn2(cbind(ext_env$slim_x, ext_env$slim_y),
cbind(subset_indPhen_df$x, subset_indPhen_df$y),k=1
)
head(nearest$nn.idx)
subset_indPhen_df$ISO <- ext_env$ISO[unlist(nearest$nn.idx)]
subset_indPhen_df$TSsd <- ext_env$TSsd[unlist(nearest$nn.idx)]
subset_indPhen_df$PSsd <- ext_env$PSsd[unlist(nearest$nn.idx)]
# sanity check
ggplot(ext_env) + geom_point( aes(x=x,y=y, color=ISO))
ggplot(subset_indPhen_df) + geom_point( aes(x=x,y=y, color=ISO))
nrow(subset_indPhen_df)
rdaout_nuisance <- rda(t(G_full_subset) ~ scale(subset_indPhen_df$env1_mat) +
scale(subset_indPhen_df$env2_MTWetQ) +
scale(subset_indPhen_df$env3_MTDQ) +
scale(subset_indPhen_df$env4_PDM) +
scale(subset_indPhen_df$env5_PwarmQ) +
scale(subset_indPhen_df$env6_PWM) +
scale(subset_indPhen_df$ISO) +
scale(subset_indPhen_df$TSsd) +
scale(subset_indPhen_df$PSsd)
)
#Make sure the 6 environments correspond to the first 6 rows
summary(rdaout_nuisance)$biplot
rdaout_nuis_pred <- data.frame(matrix(NA,
nrow=nrow(subset_indPhen_df),
ncol=6)
)
enviRDA=unlist(lapply(strsplit(rownames(rdaout_nuisance$CCA$biplot),"_"),function(x){x[4]}))
colnames(rdaout_nuis_pred)[1:6] <- paste("rdanuis_trait_pred",1:6,enviRDA[1:6],sep="_")
a<- screeplot(rdaout_nuisance)
str(a)
a$y # save this it's the eigenvalues
prop_var <- round(a$y[1:6]/sum(a$y),3)
cumsum(prop_var)
for (i in 1:6){ # hard coding here!!
rdaout_nuis_pred[,i] <- unlist(rda_trait_pred(rdaout_nuisance, i, 4))
}
head(rdaout_nuis_pred)
subset_indPhen_df <- cbind(subset_indPhen_df, rdaout_nuis_pred)
RDAbarplot[,2] <- c(
cor(subset_indPhen_df$phenotype1_mat, subset_indPhen_df$rdanuis_trait_pred_1_mat)    ,
cor(subset_indPhen_df$phenotype2_MTWetQ, subset_indPhen_df$rdanuis_trait_pred_2_MTWetQ),
cor(subset_indPhen_df$phenotype3_MTDQ, subset_indPhen_df$rdanuis_trait_pred_3_MTDQ)  ,
cor(subset_indPhen_df$phenotype4_PDM, subset_indPhen_df$rdanuis_trait_pred_4_PDM)  ,
cor(subset_indPhen_df$phenotype5_PwarmQ, subset_indPhen_df$rdanuis_trait_pred_5_PwarmQ),
cor(subset_indPhen_df$phenotype6_PWM, subset_indPhen_df$rdanuis_trait_pred_6_PWM)
)
RDAbarplot[,2] <- c(
cor(subset_indPhen_df$phenotype1_mat, subset_indPhen_df$rdanuis_trait_pred_1_mat)    ,
cor(subset_indPhen_df$phenotype2_MTWetQ, subset_indPhen_df$rdanuis_trait_pred_2_MTWetQ),
cor(subset_indPhen_df$phenotype3_MTDQ, subset_indPhen_df$rdanuis_trait_pred_3_MTDQ)  ,
cor(subset_indPhen_df$phenotype4_PDM, subset_indPhen_df$rdanuis_trait_pred_4_PDM)  ,
cor(subset_indPhen_df$phenotype5_PwarmQ, subset_indPhen_df$rdanuis_trait_pred_5_PwarmQ),
cor(subset_indPhen_df$phenotype6_PWM, subset_indPhen_df$rdanuis_trait_pred_6_PWM)
)
rdaout_PC <- rda(t(G_full_subset) ~ scale(subset_indPhen_df$env1_mat) +
scale(subset_indPhen_df$env2_MTWetQ) +
scale(subset_indPhen_df$env3_MTDQ) +
scale(subset_indPhen_df$env4_PDM) +
scale(subset_indPhen_df$env5_PwarmQ) +
scale(subset_indPhen_df$env6_PWM) +
Condition(scale(subset_indPhen_df$PC1) + scale(subset_indPhen_df$PC2))
)
write.table(t(G_full_subset), paste0(seed,"genotypes.txt"), row.names=FALSE)
lfmmfile <- paste0(seed, "_genotypes.lfmm")
write.lfmm(t(G_full_subset), lfmmfile)
#dim(rbind(subset_indPhen_df$ind_index,t(G_full_subset)))
pc = pca(lfmmfile, 20, scale = TRUE)
#saveRDS(pc,paste0(path, seed, "_pca.RDS"))
print("calculated pca")
str(pc)
subset_indPhen_df$PC1 <- pc$projections[,1]
subset_indPhen_df$PC2 <- pc$projections[,2]
subset_indPhen_df$PC3 <- pc$projections[,3]
propvarpc <- pc$sdev[1:15]/sum(pc$sdev)
plot(propvarpc, bty="l", ylab="Prop Var of PC axis",
main=paste0(plotmain, "; K=", 20), cex.main=0.5)
pdf("plots_PCA.pdf",width=5, height=4)
ggplot(subset_indPhen_df) + geom_point(aes(x=PC1, y=PC2, color=x), size=5) +
scale_color_viridis(option="magma") +
geom_point(aes(x=PC1, y=PC2, fill=y), size=2, pch=21) +  ggtheme +
scale_fill_viridis(option="mako")
dev.off()
rdaout_PC <- rda(t(G_full_subset) ~ scale(subset_indPhen_df$env1_mat) +
scale(subset_indPhen_df$env2_MTWetQ) +
scale(subset_indPhen_df$env3_MTDQ) +
scale(subset_indPhen_df$env4_PDM) +
scale(subset_indPhen_df$env5_PwarmQ) +
scale(subset_indPhen_df$env6_PWM) +
Condition(scale(subset_indPhen_df$PC1) + scale(subset_indPhen_df$PC2))
)
#Make sure the 6 environments correspond to the first 6 rows
summary(rdaout_PC)$biplot
enviRDA=unlist(lapply(strsplit(rownames(rdaout_PC$CCA$biplot),"_"),function(x){x[4]}))
rdaout_pc_pred <- data.frame(matrix(NA,
nrow=nrow(subset_indPhen_df),
ncol=6)
)
colnames(rdaout_pc_pred) <- paste("rdapc_trait_pred",1:6,enviRDA,sep="_")
a<- screeplot(rdaout_PC)
str(a)
a$y # save this it's the eigenvalues
prop_var <- round(a$y[1:6]/sum(a$y),3)
cumsum(prop_var)
for (i in 1:6){ # hard coding here!!
rdaout_pc_pred[,i] <- unlist(rda_trait_pred(rdaout_PC, i, 3))
}
head(rdaout_pc_pred)
subset_indPhen_df <- cbind(subset_indPhen_df, rdaout_pc_pred)
RDAbarplot
RDAbarplot[,4] <- c(
cor(subset_indPhen_df$phenotype1_mat, subset_indPhen_df$rdapc_trait_pred_1_mat)    ,
cor(subset_indPhen_df$phenotype2_MTWetQ, subset_indPhen_df$rdapc_trait_pred_2_MTWetQ)  ,
cor(subset_indPhen_df$phenotype3_MTDQ, subset_indPhen_df$rdapc_trait_pred_3_MTDQ)  ,
cor(subset_indPhen_df$phenotype4_PDM, subset_indPhen_df$rdapc_trait_pred_4_PDM)  ,
cor(subset_indPhen_df$phenotype5_PwarmQ, subset_indPhen_df$rdapc_trait_pred_5_PwarmQ)  ,
cor(subset_indPhen_df$phenotype6_PWM, subset_indPhen_df$rdapc_trait_pred_6_PWM)
)
head(subset_indPhen_df)
forcor <- subset_indPhen_df[,c(
which(colnames(subset_indPhen_df)=="x"),
which(colnames(subset_indPhen_df)=="y"),
grep("PC1", colnames(subset_indPhen_df)),
grep("PC2", colnames(subset_indPhen_df)),
grep("env", colnames(subset_indPhen_df))
)
]
pdf("plots_env_PCCors.pdf", width=7, height=5)
corrplot(abs(cor(forcor)),type = "upper")
dev.off()
do_lfmm_polygenic_score <- function(env_col_name, phenotype_col_name, FDR=0.05,
G = t(G_full_subset), ind = subset_indPhen_df){
# env_col_name is the character name of the column with the environment in the `ind` dataframe
# phenotype_col_name is the character name of the column with the known phenotype in the `ind` dataframe
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind[,env_col_name], ncol=1)
ground_truth_phen <- ind[,phenotype_col_name]
mod.lfmm <- lfmm_ridge(Y = G,
X = env,
K = 3)
pred_GEAoutliers <- predict_lfmm(Y = G,
X = env,
fdr.level = FDR,
mod.lfmm)
numGEAloci <- length(pred_GEAoutliers$candidates)
FDR <- sum(pred_GEAoutliers$candidates %in% which(muts_full$causal))/length(pred_GEAoutliers$candidates)
TPR <- sum(pred_GEAoutliers$candidates %in% which(muts_full$causal))/length(which(muts_full$causal))
cor_GEAoutlierPred_truth <- cor(pred_GEAoutliers$prediction, ground_truth_phen)
return(list(numGEAloci=numGEAloci,
FDR = FDR,
TPR = TPR,
cor_GEAoutlierPred_truth=cor_GEAoutlierPred_truth
))
}
t1<- do_lfmm_polygenic_score("env1_mat", "phenotype1_mat")
t1
t2<- do_lfmm_polygenic_score("env2_MTWetQ", "phenotype2_MTWetQ")
t2
t3<- do_lfmm_polygenic_score("env3_MTDQ" , "phenotype3_MTDQ" )
t3
t4 <- do_lfmm_polygenic_score("env4_PDM" , "phenotype4_PDM" )
t4
t5 <-do_lfmm_polygenic_score("env5_PwarmQ", "phenotype5_PwarmQ")
t5
t6 <- do_lfmm_polygenic_score("env6_PWM" ,  "phenotype6_PWM" )
t6
RDAbarplot
RDAbarplot[,5] <- c(t1$cor_GEAoutlierPred_truth,
t2$cor_GEAoutlierPred_truth,
t3$cor_GEAoutlierPred_truth,
t4$cor_GEAoutlierPred_truth,
t5$cor_GEAoutlierPred_truth,
t6$cor_GEAoutlierPred_truth)
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.05), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
colrs <- c(rocket(2, begin=0, end=0.3), rocket(2, begin=0.9, end=1.0))
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.05), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
colrs <- c(rocket(2, begin=0, end=0.3), rocket(2, begin=0.9, end=1.0), "cornflowerblue")
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.05), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.05,colnames(RDAbarplot), bty="n", fill= colrs)
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.05), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.05,colnames(RDAbarplot), bty="n", fill= colrs)
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.1), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.05,colnames(RDAbarplot), bty="n", fill= colrs)
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.2), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.05,colnames(RDAbarplot), bty="n", fill= colrs)
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.1), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.1,colnames(RDAbarplot), bty="n", fill= colrs)
barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
str(a)
a
text(a[5,], rep(0,5), "a")
text(a[5,], rep(0,5), "a", las=1)
text(a[5,], rep(0,5), "a", las=2)
text(a[5,], rep(0.1,5), "a", las=2)
text(a[5,], rep(0.1,5), "a", las=1)
text(a[5,], rep(0.1,5), "a", las=0)
?text
text(a[5,], rep(0.1,5), "a", srt=90)
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.1,5), "a", srt=90)
numoutliers <- c(t1$numGEAloci,
t2$numGEAloci,
t3$numGEAloci,
t4$numGEAloci,
t5$numGEAloci,
t6$numGEAloci)
FDR <- c(t1$FDR,
t2$FDR,
t3$FDR,
t4$FDR,
t5$FDR,
t6$FDR)
plotlab <- paste("# GEA outliers", numoutliers, "(FDR = ", FDR, ")")
plotlab
plotlab <- paste("# GEA outliers", numoutliers, "(FDR = ", round(FDR,2), ")")
plotlab
plotlab <- paste0("# GEA outliers =", numoutliers, "(FDR = ", round(FDR,2), ")")
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), "a", srt=90, plotlab, cex=0.5)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.5)
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.8, adj=0)
pdf("plots_RDApred.pdf", width=6, height=6)
par(mar=c(5,5,1,1))
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.8, adj=0)
dev.off()
getwd()
setwd("/Users/lotterhos/Documents/GitHub/MVP-NonClinalAF")
setwd("~/Documents/GitHub/MVP-NonClinalAF/multipheno_multienvi/output_multisim")
env
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind[,env_col_name], ncol=1)
ground_truth_phen <- ind[,phenotype_col_name]
mod.lfmm <- lfmm_ridge(Y = G,
X = env,
K = 3)
b.values <- effect_size(Y = G, X = env, lfmm.object = mod)
b.values <- effect_size(Y = G, X = env, lfmm.object = mod.lfmm)
candidates <- which(muts_full$causal)
length(candidates)
dim(G)
#length(candidates) #just checking
x.pred <- scale(Y[,candidates], scale = F)%*% matrix(b.values[candidates])
#length(candidates) #just checking
x.pred <- scale(G[,candidates], scale = F)%*% matrix(b.values[candidates])
x.pred
dim(x.pred)
cor_LfmmCausalPred_truth <- cor(x.pred, ground_truth_phen)
t1b<- do_lfmm_polygenic_score_TP("env1_mat", "phenotype1_mat")
do_lfmm_polygenic_score_TP <- function(env_col_name, phenotype_col_name,
G = t(G_full_subset), ind = subset_indPhen_df){
# env_col_name is the character name of the column with the environment in the `ind` dataframe
# phenotype_col_name is the character name of the column with the known phenotype in the `ind` dataframe
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind[,env_col_name], ncol=1)
ground_truth_phen <- ind[,phenotype_col_name]
mod.lfmm <- lfmm_ridge(Y = G,
X = env,
K = 3)
b.values <- effect_size(Y = G, X = env, lfmm.object = mod.lfmm)
candidates <- which(muts_full$causal)
#length(candidates) #just checking
x.pred <- scale(G[,candidates], scale = F)%*% matrix(b.values[candidates])
cor_LfmmCausalPred_truth <- cor(x.pred, ground_truth_phen)
return(cor_LfmmCausalPred_truth)
}
t1b<- do_lfmm_polygenic_score_TP("env1_mat", "phenotype1_mat")
t1b
t2b<- do_lfmm_polygenic_score_TP("env2_MTWetQ", "phenotype2_MTWetQ")
t2b
t3b<- do_lfmm_polygenic_score_TP("env3_MTDQ" , "phenotype3_MTDQ" )
t3b
t4b <- do_lfmm_polygenic_score_TP("env4_PDM" , "phenotype4_PDM" )
t4b
t5b <-do_lfmm_polygenic_score_TP("env5_PwarmQ", "phenotype5_PwarmQ")
t5b
t6b <- do_lfmm_polygenic_score_TP("env6_PWM" ,  "phenotype6_PWM" )
t6b
pdf("plots_RDApred.pdf", width=6, height=6)
par(mar=c(5,5,1,1))
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.8, adj=0)
dev.off()
plotlab <- paste0("# GEA outliers = ", numoutliers, " (FDR = ", round(FDR,2), ")")
pdf("plots_RDApred.pdf", width=6, height=6)
par(mar=c(5,5,1,1))
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.7, adj=0)
dev.off()
pdf("plots_RDApred.pdf", width=7, height=6)
par(mar=c(5,5,1,1))
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(RDA-predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.7, adj=0)
dev.off()
pdf("plots_RDApred.pdf", width=7, height=6)
par(mar=c(5,5,1,1))
a<- barplot(t(RDAbarplot), beside = TRUE, las=2, ylim=c(0,1.15), ylab="Cor(Predicted trait value,\nground-truth trait value)", col=colrs)
legend(1.0,1.15,colnames(RDAbarplot), bty="n", fill= colrs)
text(a[5,], rep(0.05,5), plotlab, srt=90,  cex=0.7, adj=0)
dev.off()
mut_Ps_BH <- matrix(p.adjust(mut_Ps,method = "BH"), ncol=6)
mut_sigclines_BH <- mut_Ps_BH < 0.05
# Proportion of SNPs in genome with clines for each environment
colSums(mut_sigclines_BH)/nrow(muts)
# proportion of QTNs with clines after correction for multiple tests
colSums(mut_sigclines_BH[which(muts_full$causal),])/sum(muts_full$causal)
# Proportion of SNPs in genome with clines for each environment
colSums(mut_sigclines_BH)/nrow(muts)
dim(mut_cors)
dim(mut_Ps_BH)
muts_causal <- muts[which(muts_full$causal),]
mut_cors_causal <- mut_cors[which(muts_full$causal),]
mut_Ps_causal <- mut_Ps_BH[which(muts_full$causal),]
str(mut_freq)
pdf("plot_AFpatterns.pdf", width=5, height=4)
for (i in 1:6){ #loop through climates
enva <- as.numeric(colnames(mut_freq[[i]]))
mutcor_enva <- abs(mut_cors_causal[,i])
mutP_enva <- mut_Ps_causal[,i]
mutsline <- as.numeric(mutP_enva<0.05) + 1
mutslwd <- as.numeric(mutP_enva>0.05) + 1
mutscol <-  val2col(mutcor_enva, 1.0, breaks=seq(0,1,by=0.01))
plot(c(min(enva), max(enva)), c(0,1), col="white", type="l", bty="l", ylab="", xlab="", xaxt = "n",
main=colnames(indPhen_df[env_cols[i]]))
for(j in 1:nrow(muts_causal)){ #loop through mutations
whichrow <- which(muts_full$causal)[j]
points(enva, mut_freq[[i]][whichrow,],
col=mutscol[j], lwd=mutslwd[j], lty=mutsline[j], type="l")
}
}
dev.off()
n1 <- sample(1:nrow(subset_indPhen_df), size = nrow(subset_indPhen_df), replace=FALSE)
trainind <- sort(n1[1:800])
testind <- sort(n1[801:1000])
length(unique(trainind))
testind
dim(G)
env_col_name
phenotype_col_name
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind[trainind,env_col_name], ncol=1)
ground_truth_phen <- ind[testind,phenotype_col_name]
mod.lfmm <- lfmm_ridge(Y = G[trainind,],
X = env[trainind,],
K = 3)
dim(env)
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind, ncol=1)
ground_truth_phen <- ind[,phenotype_col_name]
mod.lfmm <- lfmm_ridge(Y = G[trainind,],
X = env[trainind,],
K = 3)
dim(env)
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind[,env_col_name], ncol=1)
dim(env)
mod.lfmm <- lfmm_ridge(Y = G[trainind,],
X = env[trainind,],
K = 3)
pred_GEAoutliers <- predict_lfmm(Y = G[testind,],
X = env[testind,],
fdr.level = FDR,
mod.lfmm)
?predict_lfmm
pred_GEAoutliers <- predict_lfmm(Y = G[trainind,],
X = env[trainind,],
fdr.level = FDR,
lfmm.object= mod.lfmm,
newdata = G[testind,])
FDR
FDR = 0.05
pred_GEAoutliers <- predict_lfmm(Y = G[trainind,],
X = env[trainind,],
fdr.level = FDR,
lfmm.object= mod.lfmm,
newdata = G[testind,])
str(pred_GEAoutliers)
numGEAloci <- length(pred_GEAoutliers$candidates)
FDR <- sum(pred_GEAoutliers$candidates %in% which(muts_full$causal))/length(pred_GEAoutliers$candidates)
TPR <- sum(pred_GEAoutliers$candidates %in% which(muts_full$causal))/length(which(muts_full$causal))
ground_truth_phen <- ind[testind,phenotype_col_name]
cor_GEAoutlierPred_truth <- cor(pred_GEAoutliers$prediction, ground_truth_phen)
length(pred_GEAoutliers$prediction)
length(ground_truth_phen)
RDAbarplot
do_lfmm_polygenic_score_test <- function(env_col_name, phenotype_col_name, FDR=0.05,
G = t(G_full_subset), ind = subset_indPhen_df){
# env_col_name is the character name of the column with the environment in the `ind` dataframe
# phenotype_col_name is the character name of the column with the known phenotype in the `ind` dataframe
# G is a matrix with individuals in rows and SNPs in columns
env <- matrix(ind[,env_col_name], ncol=1)
ground_truth_phen <- ind[testind,phenotype_col_name]
mod.lfmm <- lfmm_ridge(Y = G[trainind,],
X = env[trainind,],
K = 3)
pred_GEAoutliers <- predict_lfmm(Y = G[trainind,],
X = env[trainind,],
fdr.level = FDR,
lfmm.object= mod.lfmm,
newdata = G[testind,])
numGEAloci <- length(pred_GEAoutliers$candidates)
FDR <- sum(pred_GEAoutliers$candidates %in% which(muts_full$causal))/length(pred_GEAoutliers$candidates)
TPR <- sum(pred_GEAoutliers$candidates %in% which(muts_full$causal))/length(which(muts_full$causal))
cor_GEAoutlierPred_truth <- cor(pred_GEAoutliers$prediction, ground_truth_phen)
return(list(numGEAloci=numGEAloci,
FDR = FDR,
TPR = TPR,
cor_GEAoutlierPred_truth=cor_GEAoutlierPred_truth
))
}
t1<- do_lfmm_polygenic_score_test("env1_mat", "phenotype1_mat")
t1
t2<- do_lfmm_polygenic_score_test("env2_MTWetQ", "phenotype2_MTWetQ")
t2
t3<- do_lfmm_polygenic_score_test("env3_MTDQ" , "phenotype3_MTDQ" )
t3
t4 <- do_lfmm_polygenic_score_test("env4_PDM" , "phenotype4_PDM" )
t4
t5 <-do_lfmm_polygenic_score_test("env5_PwarmQ", "phenotype5_PwarmQ")
t5
t6 <- do_lfmm_polygenic_score_test("env6_PWM" ,  "phenotype6_PWM" )
t6
RDAbarplot
citation(lfmm)
citation("lfmm")
?predict_lfmm
sessionInfo()
libraries_needed <- c("vegan", "LEA", "lfmm")
for (i in 1:length(libraries_needed)){
library(libraries_needed[i],character.only = TRUE) #laptop
}
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/MVP-NonClinalAF/tutorial") #change code to your working directory
G <- read.table("Genotypes.zip")
?predict_lfmm
setwd("~/Documents/GitHub/MVP-NonClinalAF/tutorial")
G <- read.table("Genotypes.zip")
list.files()
G <- read.table("Genotypes.txt.zip")
G <- read.table("Genotypes.txt.zip", header=TRUE)
G <- read.table("Genotypes.txt.zip", nrows=1000,header=TRUE)
?gzfile
G <- read.table(gzfile("Genotypes.txt.zip"))
G <- read.table(unz("Genotypes.txt.zip"))
G <- read.table(unz("Genotypes.txt.zip", "Genotypes.txt"))
dim(G)
rownames(G) <- as.character(rownames(G))
colnames(G) <- as.character(colnames(G))
#G <- as.matrix(G)
head(G[,1:10])
ind <- read.table("Individuals.txt", header=TRUE)
dim(ind) #corresponds to rows in G
head(ind)
muts <-  read.table("SNPs.txt", header=TRUE)
dim(muts) #corresponds to columns in G
head(muts)
rownames(G) <- as.character(paste0("i_",ind$ind_index))
colnames(G) <- as.character(muts$mutname)
#G <- as.matrix(G)
head(G[,1:10])
rda_trait_pred <- function(rdaobj, env_row, K){
#rdaobj is RDA object
#envi row is the row of the environment in the biplot output
#K is the number of RDA axes
scores <- scores(rdaobj, choices=1:K)
ind.sc <- scores$sites
pred <- matrix(NA, nrow=nrow(ind.sc), ncol=K)
for (k in 1:K){
pred[,k] <- ind.sc[,k]*eigenvals(rdaobj)[k]*summary(rdaobj)$biplot[env_row,k]
}
trait_pred <- scale(rowSums(pred))
return(trait_pred)
}
ind$env1_mat <- scale(ind$env1_mat)
ind$env2_MTWetQ <- scale(ind$env2_MTWetQ)
ind$env3_MTDQ <- scale(ind$env3_MTDQ)
ind$env4_PDM <- scale(ind$env4_PDM)
ind$env5_PwarmQ <- scale(ind$env5_PwarmQ)
ind$env6_PWM <- scale(ind$env6_PWM)
# Run the RDA
rdaout <- rda(G ~ ind$env1_mat +
ind$env2_MTWetQ +
ind$env3_MTDQ +
ind$env4_PDM +
ind$env5_PwarmQ +
ind$env6_PWM
)
otherenv <- c(seq(1,0,length.out=100), seq(0,1,length.out=101))
library(shiny); runApp('~/Documents/GitHub/MVP_Apps1/GmatrixApp/QuantGenMultivariateResponseToSelection.R')
